#!/usr/bin/env python3
"""
JWT Token Generator for Exabeam MCP Server

This utility generates JWT tokens for testing and development purposes.
In production, tokens should be generated by your authentication system.
"""

import jwt
import sys
import json
from datetime import datetime, timedelta, timezone
from typing import Dict, Any

def generate_token(
    secret: str, 
    user_id: str = "test-user", 
    name: str = "Test User",
    admin: bool = False,
    hours: int = 24,
    algorithm: str = "HS256",
    no_expiry: bool = False
) -> str:
    """
    Generate a JWT token for testing
    
    Args:
        secret: JWT secret key
        user_id: User identifier
        name: User display name
        admin: Whether user has admin privileges
        hours: Token validity in hours (ignored if no_expiry=True)
        algorithm: JWT algorithm (HS256 or RS256)
        no_expiry: If True, creates a non-expiring token
    
    Returns:
        JWT token string
    """
    now = datetime.now(timezone.utc) - timedelta(seconds=30)
    payload = {
        "sub": user_id,
        "name": name,
        "admin": admin,
        "iat": int(now.timestamp()),
        "iss": "exabeam-mcp-server"
    }
    
    if not no_expiry:
        payload["exp"] = int((now + timedelta(hours=hours)).timestamp())
    
    token = jwt.encode(payload, secret, algorithm=algorithm)
    return token

def validate_generate_params(argv):
    """Validate generate command parameters and provide helpful error messages"""
    if len(argv) == 5:  # Common mistake: missing display name
        print("❌ Error: Missing display name parameter")
        print("\nDetected 4 parameters but 5 are required:")
        print("  1. JWT secret")
        print("  2. User ID") 
        print("  3. Display name ← MISSING")
        print("  4. Admin status (true/false)")
        print("  5. Hours (optional)")
        print(f"\nYour command: {' '.join(argv[1:])}")
        secret = argv[2]
        user_id = argv[3]
        admin_flag = argv[4]
        hours = argv[5] if len(argv) > 5 else "24"
        print(f"\nTry this instead:")
        print(f'python3 scripts/generate_token.py generate "{secret}" "{user_id}" "{user_id} User" {admin_flag} {hours}')
        return False
    return True

def decode_token(token: str, secret: str, algorithm: str = "HS256") -> Dict[str, Any]:
    """
    Decode and verify a JWT token
    
    Args:
        token: JWT token string
        secret: JWT secret key
        algorithm: JWT algorithm
    
    Returns:
        Decoded payload
    """
    try:
        payload = jwt.decode(
            token, 
            secret, 
            algorithms=[algorithm],
            leeway=timedelta(seconds=60)  # Allow 10 seconds leeway for timing issues
        )
        return payload
    except jwt.InvalidTokenError as e:
        raise ValueError(f"Invalid token: {str(e)}")

def main():
    """Main CLI interface"""
    if len(sys.argv) < 2:
        print("Usage: python generate_token.py <command> [options]")
        print("\nCommands:")
        print("  generate <jwt_secret> <user_id> <display_name> <admin> [hours] [algorithm] [--no-expiry]")
        print("  decode <token> <jwt_secret> [algorithm]")
        print("  example - Generate example token like the user provided")
        print("\nExamples:")
        print("  python generate_token.py generate my-secret-key")
        print("  python generate_token.py generate my-secret-key user123 'John Doe' true 48")
        print("  python generate_token.py generate 'secret-with-special-chars=' user123 'John Doe' true 24")
        print("  python generate_token.py generate my-secret-key user123 'John Doe' true 0 HS256 --no-expiry")
        print("  python generate_token.py decode eyJ... my-secret-key")
        print("  python generate_token.py example")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "generate":
        if len(sys.argv) < 3:
            print("Error: JWT secret required")
            sys.exit(1)
        
        if not validate_generate_params(sys.argv):
            sys.exit(1)
        
        secret = sys.argv[2]
        user_id = sys.argv[3] if len(sys.argv) > 3 else "test-user"
        name = sys.argv[4] if len(sys.argv) > 4 else f"{user_id} User"
        admin = sys.argv[5].lower() == 'true' if len(sys.argv) > 5 else False
        hours = int(sys.argv[6]) if len(sys.argv) > 6 else 24
        algorithm = sys.argv[7] if len(sys.argv) > 7 else "HS256"
        
        no_expiry = "--no-expiry" in sys.argv
        
        if len(sys.argv) > 5 and sys.argv[5].lower() not in ['true', 'false']:
            print(f"❌ Error: Admin parameter must be 'true' or 'false', got '{sys.argv[5]}'")
            sys.exit(1)
        
        token = generate_token(secret, user_id, name, admin, hours, algorithm, no_expiry)
        
        print(f"Generated JWT Token:")
        print(f"Token: {token}")
        print(f"\nPayload:")
        payload = decode_token(token, secret, algorithm)
        print(json.dumps(payload, indent=2))
        
        if no_expiry:
            print(f"\n⚠️  WARNING: This is a NON-EXPIRING token. Keep it secure!")
            print(f"   Consider rotating this token periodically for security.")
        
        print(f"\nUsage:")
        print(f"curl -H 'Authorization: Bearer {token}' http://localhost:8080/mcp/tools")
    
    elif command == "decode":
        if len(sys.argv) < 4:
            print("Error: Token and JWT secret required")
            sys.exit(1)
        
        token = sys.argv[2]
        secret = sys.argv[3]
        algorithm = sys.argv[4] if len(sys.argv) > 4 else "HS256"
        
        try:
            payload = decode_token(token, secret, algorithm)
            print("Decoded JWT Payload:")
            print(json.dumps(payload, indent=2))
            
            if payload.get("exp"):
                exp_time = datetime.fromtimestamp(payload["exp"])
                now = datetime.now(timezone.utc)
                if exp_time > now:
                    print(f"\nToken is valid until: {exp_time}")
                else:
                    print(f"\nToken expired at: {exp_time}")
        
        except ValueError as e:
            print(f"Error: {str(e)}")
            sys.exit(1)
    
    elif command == "example":
        secret = "your-jwt-secret-key-here"
        token = generate_token(
            secret=secret,
            user_id="1234567435453453453454365463568900",
            name="CARLITOTESTMCP", 
            admin=True,
            hours=24,
            algorithm="HS256"
        )
        
        print("Example JWT Token (similar to user's format):")
        print(f"Token: {token}")
        print(f"\nTo use with MCP server:")
        print(f"export JWT_SECRET='{secret}'")
        print(f"curl -H 'Authorization: Bearer {token}' http://localhost:8080/mcp/tools")
        
        print(f"\nDecoded payload:")
        payload = decode_token(token, secret)
        print(json.dumps(payload, indent=2))
    
    else:
        print(f"Unknown command: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()
